import { ChangeEventHandler, FC, useEffect, useState } from "react";
import classnames from "classnames";
import slugify from "slugify";
import SeoAnalysisV2 from "./SeoAnalysisV2";

// √Ånh x·∫° k√Ω t·ª± ti·∫øng Vi·ªát
const vietnameseCharMap: { [key: string]: string } = {
  √°: "a",
  √†: "a",
  ·∫£: "a",
  √£: "a",
  ·∫°: "a",
  ƒÉ: "a",
  ·∫Ø: "a",
  ·∫±: "a",
  ·∫≥: "a",
  ·∫µ: "a",
  ·∫∑: "a",
  √¢: "a",
  ·∫•: "a",
  ·∫ß: "a",
  ·∫©: "a",
  ·∫´: "a",
  ·∫≠: "a",
  √©: "e",
  √®: "e",
  ·∫ª: "e",
  ·∫Ω: "e",
  ·∫π: "e",
  √™: "e",
  ·∫ø: "e",
  ·ªÅ: "e",
  ·ªÉ: "e",
  ·ªÖ: "e",
  ·ªá: "e",
  √≠: "i",
  √¨: "i",
  ·ªâ: "i",
  ƒ©: "i",
  ·ªã: "i",
  √≥: "o",
  √≤: "o",
  ·ªè: "o",
  √µ: "o",
  ·ªç: "o",
  √¥: "o",
  ·ªë: "o",
  ·ªì: "o",
  ·ªï: "o",
  ·ªó: "o",
  ·ªô: "o",
  ∆°: "o",
  ·ªõ: "o",
  ·ªù: "o",
  ·ªü: "o",
  ·ª°: "o",
  ·ª£: "o",
  √∫: "u",
  √π: "u",
  ·ªß: "u",
  ≈©: "u",
  ·ª•: "u",
  ∆∞: "u",
  ·ª©: "u",
  ·ª´: "u",
  ·ª≠: "u",
  ·ªØ: "u",
  ·ª±: "u",
  √Ω: "y",
  ·ª≥: "y",
  ·ª∑: "y",
  ·ªπ: "y",
  ·ªµ: "y",
  ƒë: "d",
  √Å: "A",
  √Ä: "A",
  ·∫¢: "A",
  √É: "A",
  ·∫†: "A",
  ƒÇ: "A",
  ·∫Æ: "A",
  ·∫∞: "A",
  ·∫≤: "A",
  ·∫¥: "A",
  ·∫∂: "A",
  √Ç: "A",
  ·∫§: "A",
  ·∫¶: "A",
  ·∫®: "A",
  ·∫™: "A",
  ·∫¨: "A",
  √â: "E",
  √à: "E",
  ·∫∫: "E",
  ·∫º: "E",
  ·∫∏: "E",
  √ä: "E",
  ·∫æ: "E",
  ·ªÄ: "E",
  ·ªÇ: "E",
  ·ªÑ: "E",
  ·ªÜ: "E",
  √ç: "I",
  √å: "I",
  ·ªà: "I",
  ƒ®: "I",
  ·ªä: "I",
  √ì: "O",
  √í: "O",
  ·ªé: "O",
  √ï: "O",
  ·ªå: "O",
  √î: "O",
  ·ªê: "O",
  ·ªí: "O",
  ·ªî: "O",
  ·ªñ: "O",
  ·ªò: "O",
  ∆†: "O",
  ·ªö: "O",
  ·ªú: "O",
  ·ªû: "O",
  ·ª†: "O",
  ·ª¢: "O",
  √ö: "U",
  √ô: "U",
  ·ª¶: "U",
  ≈®: "U",
  ·ª§: "U",
  ∆Ø: "U",
  ·ª®: "U",
  ·ª™: "U",
  ·ª¨: "U",
  ·ªÆ: "U",
  ·ª∞: "U",
  √ù: "Y",
  ·ª≤: "Y",
  ·ª∂: "Y",
  ·ª∏: "Y",
  ·ª¥: "Y",
  ƒê: "D",
};

// C·∫•u h√¨nh slugify ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát
slugify.extend(vietnameseCharMap);

export interface SeoResult {
  meta: string;
  slug: string;
  tags: string;
  category: string;
  focusKeyword: string;
}

interface Props {
  initialValue?: SeoResult;
  title?: string;
  editor?: any;
  onChange(result: SeoResult): void;
}

const commonInput =
  "w-full bg-transparent outline-none border-2 border-secondary-dark focus:border-primary-dark focus:dark:border-primary rounded transition text-dark dark:text-primary p-2";

const SEOForm: FC<Props> = ({
  initialValue,
  title = "",
  editor,
  onChange,
}): JSX.Element => {
  // Initialize state with all SeoResult fields, including tags
  const [values, setValues] = useState<SeoResult>({
    meta: "",
    slug: "",
    tags: "",
    category: "",
    focusKeyword: "",
  });

  const handleChange: ChangeEventHandler<
    HTMLTextAreaElement | HTMLInputElement | HTMLSelectElement
  > = ({ target }) => {
    let { name, value } = target;
    if (name === "meta") value = value.substring(0, 250);
    const newValues = { ...values, [name]: value };
    setValues(newValues);
    onChange(newValues);
  };

  useEffect(() => {
    const slug = slugify(title.toLowerCase(), {
      strict: true,
    });
    const newValues = { ...values, slug };
    setValues(newValues);
    onChange(newValues);
  }, [title, onChange]);

  useEffect(() => {
    if (initialValue) {
      setValues({
        meta: initialValue.meta || "",
        slug: slugify(initialValue.slug || "", {
          strict: true,
        }),
        tags: initialValue.tags || "",
        category: initialValue.category || "",
        focusKeyword: initialValue.focusKeyword || "",
      });
    }
  }, [initialValue]);

  const { meta, slug, category, focusKeyword } = values;

  return (
    <div className="space-y-6">
      <h3 className="seo-form-title">
        <span>üîç</span>
        T·ªëi ∆∞u SEO
      </h3>
      
      {/* Focus Keyword */}
      <div className="seo-form-group">
        <label className="seo-form-label">
          T·ª´ kh√≥a ch√≠nh:
        </label>
        <input
          type="text"
          name="focusKeyword"
          value={focusKeyword}
          onChange={handleChange}
          className="seo-form-input"
          placeholder="Nh·∫≠p t·ª´ kh√≥a ch√≠nh ƒë·ªÉ ph√¢n t√≠ch SEO"
        />
      </div>
      
      <div className="seo-form-grid">
        <div className="seo-form-group">
          <label className="seo-form-label">
            Danh m·ª•c:
          </label>
          <select
            name="category"
            value={category}
            onChange={handleChange}
            className="seo-form-input"
          >
            <option value="" disabled>
              Ch·ªçn m·ªôt danh m·ª•c
            </option>
            <option value="Chuy·ªán c·ªßa Farm">Chuy·ªán c·ªßa Farm</option>
            <option value="S·ªëng xanh">S·ªëng xanh</option>
            <option value="Tin t·ª©c v√† xu h∆∞·ªõng">
              Tin t·ª©c v√† xu h∆∞·ªõng th·ª±c ph·∫©m h·ªØu c∆°
            </option>
            <option value="C√¥ng th·ª©c n·∫•u ƒÉn">
              C√¥ng th·ª©c n·∫•u ƒÉn t·ª´ th·ª±c ph·∫©m h·ªØu c∆°
            </option>
          </select>
        </div>
        
        <div className="seo-form-group">
          <Input
            value={slug}
            onChange={handleChange}
            name="slug"
            placeholder="T·ªëi ∆∞u ƒë∆∞·ªùng d·∫´n"
            label="Slug: "
          />
        </div>
      </div>

      <div className="seo-form-group">
        <label className="seo-form-label">
          Meta Description:
        </label>
        <div className="relative">
          <textarea
            name="meta"
            value={meta}
            onChange={handleChange}
            className="seo-form-input seo-form-textarea"
            placeholder="Meta description 160-200 k√Ω t·ª± th√¨ ok"
          ></textarea>
          <p className="absolute bottom-3 right-3 text-dark dark:text-white text-sm">
            {meta.length}/250
          </p>
        </div>
      </div>

      {/* SEO Analysis */}
      <div className="mt-6">
        <h4 className="text-lg font-semibold text-gray-800 dark:text-white mb-4">
          üîç Ph√¢n t√≠ch SEO
        </h4>
        
        {!focusKeyword ? (
          <div className="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg">
            <p className="text-blue-800 dark:text-blue-200 text-center">
              üí° Nh·∫≠p t·ª´ kh√≥a ch√≠nh ·ªü tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch SEO
            </p>
          </div>
        ) : (
          <div>
            <div className="p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg mb-4">
              <p className="text-green-800 dark:text-green-200 text-center">
                ‚úÖ T·ª´ kh√≥a: &quot;{focusKeyword}&quot; - ƒêang ph√¢n t√≠ch...
              </p>
            </div>
            {(() => {
              try {
                return (
                  <SeoAnalysisV2
                    editor={editor}
                    title={title}
                    meta={meta}
                    slug={slug}
                    focusKeyword={focusKeyword}
                  />
                );
              } catch (error) {
                console.error('Error rendering SeoAnalysis:', error);
                return (
                  <div className="p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg">
                    <p className="text-red-800 dark:text-red-200 text-center">
                      ‚ùå L·ªói khi t·∫£i ph√¢n t√≠ch SEO. Vui l√≤ng th·ª≠ l·∫°i.
                    </p>
                  </div>
                );
              }
            })()}
          </div>
        )}
      </div>
    </div>
  );
};

const Input: FC<{
  name?: string;
  value?: string;
  placeholder?: string;
  label?: string;
  onChange?: ChangeEventHandler<HTMLInputElement>;
}> = ({ name, value, placeholder, label, onChange }) => {
  return (
    <label className="block relative">
      <span className="seo-form-label">
        {label}
      </span>

      <input
        type="text"
        name={name}
        value={value}
        placeholder={placeholder}
        className="seo-form-input"
        onChange={onChange}
      />
    </label>
  );
};

export default SEOForm;